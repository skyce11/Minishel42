Signales

// SALIDA CTRL+C //
Par d√©faut, lorsque SIGINT interrompt un programme, il se termine avec un code
de sortie de 130. Ce nombre suit la convention o√π :
- Les codes de sortie normaux vont de 0 √† 255.
- Les programmes termin√©s par un signal ajoutent 128 au num√©ro du signal re√ßu.
‚Ä¢ Comme SIGINT est le signal 2, cela donne 128 + 2 = 130.

// SALIDA CTRL+\ //
Ctrl+\ envoie le signal SIGQUIT (num√©ro 3) au processus en cours.
SIGQUIT force le programme √† s'arr√™ter imm√©diatement et g√©n√®re un core dump
(une image m√©moire du programme au moment de l'arr√™t), ce qui est utile pour le
debugging.
- Ce qui se passe quand tu appuies sur Ctrl+\ :
    Le terminal envoie SIGQUIT au processus.
- Le programme peut le g√©rer (comme trap SIGQUIT dans un script) ou se terminer
    brusquement.
-  Si le programme ne capture pas SIGQUIT, il s'arr√™te et produit un fichier
    core qui peut √™tre analys√© avec gdb pour voir o√π et pourquoi il a crash√©.
- Code de sortie :
    Comme pour SIGINT, le code de sortie est 128 + num√©ro du signal.
    SIGQUIT √©tant 3, le programme renverra 131 (128 + 3).

// SALIDA CTRL+D //
Ctrl+D envoie un EOF (End Of File) au terminal, ce qui signifie que l'entr√©e
standard (stdin) est termin√©e. Son effet d√©pend du contexte :

- Dans le terminal interactif :
Si tu appuies sur Ctrl+D, Bash interpr√®te cela comme une fin de session et
ferme le shell (√©quivalent √† exit).
- Dans un programme attendant une entr√©e :
    Par exemple, si tu utilises cat ou wc, appuyer sur Ctrl+D signifie qu'il
n'y a plus de texte √† lire, donc le programme
termine son traitement.
- Dans un script :
Il est souvent utilis√© pour simuler la fin d'un fichier lors d'une redirection,
par exemple :

// TEST


3. Ignorer Ctrl+\ (SIGQUIT)
‚úÖ Objectif : Emp√™cher SIGQUIT de fermer le shell.

üîπ Test :

bash
cat
‚û°Ô∏è Appuie sur Ctrl+\ : Le shell ne doit pas √™tre quitt√©, mais peut afficher "Signal ignor√©".

üìå √Ä impl√©menter :

signal(SIGQUIT, SIG_IGN); pour ignorer Ctrl+\.
